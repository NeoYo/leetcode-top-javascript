/*
 * @lc app=leetcode.cn id=134 lang=javascript
 *
 * [134] 加油站
 *
 * https://leetcode-cn.com/problems/gas-station/description/
 *
 * algorithms
 * Medium (53.98%)
 * Likes:    388
 * Dislikes: 0
 * Total Accepted:    46.4K
 * Total Submissions: 85.9K
 * Testcase Example:  '[1,2,3,4,5]\n[3,4,5,1,2]'
 *
 * 在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
 * 
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
 * 
 * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
 * 
 * 说明: 
 * 
 * 
 * 如果题目有解，该答案即为唯一答案。
 * 输入数组均为非空数组，且长度相同。
 * 输入数组中的元素均为非负数。
 * 
 * 
 * 示例 1:
 * 
 * 输入: 
 * gas  = [1,2,3,4,5]
 * cost = [3,4,5,1,2]
 * 
 * 输出: 3
 * 
 * 解释:
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
 * 因此，3 可为起始索引。
 * 
 * 示例 2:
 * 
 * 输入: 
 * gas  = [2,3,4]
 * cost = [3,4,3]
 * 
 * 输出: -1
 * 
 * 解释:
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 * 
 */

/**
题解：
    index= [0,  1,  2,  3,  4]
    gas  = [1,  2,  3,  4,  5]
  cost = [3,  4,  5,  1,  2]

一、不变的折线图

    第 i 个加油站有汽油 gas[i] 升，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升

    这句话可画出折线图，从第 i 个加油站开始，在上往下，然后要到每一个加油站，都会经历先下后上

    不管从哪个加油站，曲线的上下规则是不变的，也就是折线图是不变的

                /\    /\
    \    /\    /  \  /  \
     \  /  \  /    \/    \
      \/    \/            \
    

二、最低点的意义

    题目说明中，如果题目有解，该答案即为唯一答案，即题目只存在两种情况，有唯一解和无解
    
    如果有唯一解，只能是最低点的下一个点

    那么想要做的是，找到下降的最低点

    这个“最低点”，不是 cost数组 的最小值，而是经过某一段距离的叠加，达到了最低点。

    比如 -7 和 -1，-7 虽然更小，但是 -1 在 -7 的基础上，叠加得到 -8

三、寻找 "最低点"

    实现代码如下
 */

// @lc code=start
/**
 * @param {number[]} gas
 * @param {number[]} cost
 * @return {number}
 */
var canCompleteCircuit = function(gas, cost) {
    let total = 0;
    let min = Infinity;
    let minIndex = 0;

    for (let i = 0; i < gas.length; i++) {
        total += gas[i] - cost[i];
        if (total < min) {
            min = total;
            minIndex = i;
        }
    }

    return total < 0 ? -1 : (minIndex + 1) % gas.length; // +1 会溢出，用 % 可以重置
};
// @lc code=end

